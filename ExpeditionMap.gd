extends Node2D

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ü–µ–Ω—ã
@onready var map_generator: Node = $MapGenerator
@onready var party: Node = $Party
@onready var camera: Camera2D = $Camera2D
@onready var path_line: Line2D = $PathLine
@onready var ui_log: Label = $UI/EventLog

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
var map_points: Array = []        # –í—Å–µ —Ç–æ—á–∫–∏ –∫–∞—Ä—Ç—ã (MapPointData)
var point_nodes: Array = []       # –í—Å–µ —É–∑–ª—ã —Ç–æ—á–µ–∫ (MapPoint)
var selected_path_id: int = -1    # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
var is_path_selected: bool = false # –í—ã–±—Ä–∞–Ω –ª–∏ –ø—É—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
@export var camera_offset: Vector2 = Vector2(0, -50)  # –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤–≤–µ—Ä—Ö

func _ready():
	print("ExpeditionMap: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–∑–ª—ã –Ω–∞–π–¥–µ–Ω—ã
	if not map_generator:
		print("–û–®–ò–ë–ö–ê: MapGenerator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	if not party:
		print("–û–®–ò–ë–ö–ê: Party –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	if not camera:
		print("–û–®–ò–ë–ö–ê: Camera2D –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	if not path_line:
		print("–û–®–ò–ë–ö–ê: PathLine –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
	setup_camera()
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
	connect_signals()
	
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
	await generate_initial_map()

func setup_camera():
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É"""
	if camera:
		camera.enabled = true
		camera.position_smoothing_enabled = true
		camera.position_smoothing_speed = 5.0
		camera.zoom = Vector2(0.8, 0.8)
	else:
		print("–û–®–ò–ë–ö–ê: –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

func connect_signals():
	"""–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
	# –°–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ –æ—Ç—Ä—è–¥–æ–º
	party.reached_point.connect(on_party_reached_point)
	party.movement_completed.connect(on_party_movement_completed)

func generate_initial_map():
	"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É"""
	print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")
	
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
	map_points = map_generator.generate_initial_segment()
	
	# –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —Ç–æ—á–µ–∫
	await create_point_nodes()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –ø—É—Ç–∏
	update_path_lines()
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç—Ä—è–¥–∞
	set_party_path()
	
	log_message("–ö–∞—Ä—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Ç–æ—á–∫–µ —Ä–∞–∑–≤–∏–ª–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏.")

func create_point_nodes():
	"""–°–æ–∑–¥–∞–µ—Ç —É–∑–ª—ã —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ"""
	# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–∑–ª—ã
	for node in point_nodes:
		if is_instance_valid(node):
			node.queue_free()
	point_nodes.clear()
	
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–∑–ª—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
	for point_data in map_points:
		var point_node = await create_map_point_node(point_data)
		if point_node:
			point_nodes.append(point_node)
	
	print("–°–æ–∑–¥–∞–Ω–æ ", point_nodes.size(), " —É–∑–ª–æ–≤ —Ç–æ—á–µ–∫")

func create_map_point_node(point_data) -> Node:
	"""–°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª —Ç–æ—á–∫–∏ –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
	# –°–æ–∑–¥–∞–µ–º Area2D
	var area2d = Area2D.new()
	area2d.position = point_data.position
	
	# –°–æ–∑–¥–∞–µ–º CollisionShape2D
	var collision_shape = CollisionShape2D.new()
	var rect_shape = RectangleShape2D.new()
	rect_shape.size = Vector2(40, 40)
	collision_shape.shape = rect_shape
	area2d.add_child(collision_shape)
	
	# –°–æ–∑–¥–∞–µ–º Background (ColorRect)
	var background = ColorRect.new()
	background.name = "Background"  # –í–∞–∂–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
	background.anchors_preset = Control.PRESET_CENTER
	background.offset_left = -20.0
	background.offset_top = -20.0
	background.offset_right = 20.0
	background.offset_bottom = 20.0
	background.color = Color.WHITE
	area2d.add_child(background)
	
	# –°–æ–∑–¥–∞–µ–º Icon (Label)
	var icon = Label.new()
	icon.name = "Icon"  # –í–∞–∂–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
	icon.anchors_preset = Control.PRESET_CENTER
	icon.offset_left = -15.0
	icon.offset_top = -15.0
	icon.offset_right = 15.0
	icon.offset_bottom = 15.0
	icon.text = "‚Ä¢"
	icon.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	icon.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	area2d.add_child(icon)
	
	# –ñ–¥–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	await get_tree().process_frame
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
	add_child(area2d)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç
	var script = load("res://MapPoint.gd")
	if script:
		area2d.set_script(script)
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
		area2d.set("point_id", point_data.id)
		area2d.set("event_type", point_data.event_type)
		area2d.set("is_branch_point", point_data.is_branch)
		area2d.set("is_visited", point_data.is_visited)
		area2d.set("is_current", point_data.is_current)
		
		# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫–ª–∏–∫–∞
		area2d.point_clicked.connect(_on_point_selected)
		
		# –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
		update_point_appearance_directly(area2d, point_data)
	else:
		print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MapPoint.gd, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ—á–∫—É")
		# Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ—á–∫—É —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
		area2d.set_meta("point_id", point_data.id)
		area2d.input_event.connect(func(_viewport, event, _shape_idx): _on_simple_point_clicked(point_data.id, event))
		update_simple_point_appearance(area2d, point_data)
	
	return area2d

func update_point_appearance_directly(point_node: Node, point_data):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ—á–∫–∏ –Ω–∞–ø—Ä—è–º—É—é"""
	if not point_node.has_method("update_appearance"):
		return
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
	point_node.set("point_id", point_data.id)
	point_node.set("event_type", point_data.event_type)
	point_node.set("is_branch_point", point_data.is_branch)
	point_node.set("is_visited", point_data.is_visited)
	point_node.set("is_current", point_data.is_current)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
	point_node.update_appearance()

func update_simple_point_appearance(point_node: Node, point_data):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–æ—Å—Ç–æ–π —Ç–æ—á–∫–∏"""
	var background = point_node.get_node_or_null("Background")
	var icon = point_node.get_node_or_null("Icon")
	
	if background and icon:
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if point_data.is_current:
			background.color = Color.YELLOW
		elif point_data.is_visited:
			background.color = Color.GRAY
		elif point_data.is_branch:
			background.color = Color.GREEN
		else:
			background.color = Color.WHITE
		
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
		var icons = ["‚Ä¢", "‚öîÔ∏è", "ü™§", "üõí", "‚ùì"]
		icon.text = icons[point_data.event_type]

func _on_simple_point_clicked(point_id: int, event: InputEvent):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–æ—á–∫–µ"""
	if event is InputEventMouseButton:
		var mouse_event = event as InputEventMouseButton
		if mouse_event.pressed and mouse_event.button_index == MOUSE_BUTTON_LEFT:
			_on_point_selected(point_id)

func _on_point_selected(point_id: int):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–º"""
	print("–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞: ", point_id)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–∫–∞ —Ä–∞–∑–≤–∏–ª–∫–∏
	var point_data = get_point_data_by_id(point_id)
	if not point_data or not point_data.is_branch:
		log_message("–≠—Ç–∞ —Ç–æ—á–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–≤–∏–ª–∫–æ–π!")
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å
	selected_path_id = point_id
	is_path_selected = true
	
	log_message("–í—ã–±—Ä–∞–Ω –ø—É—Ç—å –∫ —Ç–æ—á–∫–µ " + str(point_id))
	
	# –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
	disable_all_point_clicks()
	
	# –£–¥–∞–ª—è–µ–º –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
	remove_unselected_points(point_id)
	
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
	generate_new_segment_from_point(point_id)

func disable_all_point_clicks():
	"""–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫"""
	for point_node in point_nodes:
		if is_instance_valid(point_node):
			if point_node.has_method("disable_click"):
				point_node.disable_click()
			else:
				# –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ—á–µ–∫
				point_node.monitoring = false
				point_node.monitorable = false

func remove_unselected_points(selected_point_id: int):
	"""–£–¥–∞–ª—è–µ—Ç –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏"""
	var points_to_remove = []
	
	# –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	for point_node in point_nodes:
		if is_instance_valid(point_node):
			var point_id = -1
			if point_node.has_method("get_point_id"):
				point_id = point_node.get("point_id")
			elif point_node.has_meta("point_id"):
				point_id = point_node.get_meta("point_id")
			
			if point_id != selected_point_id and point_id != map_generator.current_point_id:
				points_to_remove.append(point_node)
	
	# –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏
	for point_node in points_to_remove:
		if is_instance_valid(point_node):
			point_node.queue_free()
		point_nodes.erase(point_node)
	
	print("–£–¥–∞–ª–µ–Ω–æ ", points_to_remove.size(), " –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫")

func generate_new_segment_from_point(point_id: int):
	"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"""
	# –í—ã–±–∏—Ä–∞–µ–º –ø—É—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
	map_generator.select_path(point_id)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
	map_points = map_generator.points
	
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–∑–ª—ã —Ç–æ—á–µ–∫
	await create_point_nodes()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –ø—É—Ç–∏
	update_path_lines()
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç—Ä—è–¥–∞
	set_party_path()
	
	log_message("–ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

func update_path_lines():
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–Ω–∏–∏ –ø—É—Ç–∏"""
	path_line.clear_points()
	
	# –†–∏—Å—É–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
	var connections = map_generator.get_all_connections()
	for connection in connections:
		var from_point = get_point_data_by_id(connection[0])
		var to_point = get_point_data_by_id(connection[1])
		
		if from_point and to_point:
			path_line.add_point(from_point.position)
			path_line.add_point(to_point.position)

func set_party_path():
	"""–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –æ—Ç—Ä—è–¥–∞"""
	var path_points: Array[Vector2] = []
	
	# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π
	var current_point = get_current_point_data()
	var next_point = get_next_point_data()
	
	if current_point and next_point:
		path_points.append(current_point.position)
		path_points.append(next_point.position)
		
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç—Ä—è–¥–∞
		party.set_path(path_points)
		
		log_message("–û—Ç—Ä—è–¥ –¥–≤–∏–∂–µ—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ...")

func on_party_reached_point(point_index: int):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç—Ä—è–¥–æ–º"""
	print("–û—Ç—Ä—è–¥ –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏: ", point_index)
	
	# –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
	var point_data = get_point_data_by_id(point_index)
	if not point_data:
		return
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—á–∫–∏
	point_data.is_visited = true
	point_data.is_current = false
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª —Ç–æ—á–∫–∏
	var point_node = get_point_node_by_id(point_index)
	if point_node:
		if point_node.has_method("set_visited"):
			point_node.set_visited(true)
		else:
			# –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ—á–∫—É
			if point_node.has_method("set"):
				point_node.set("is_visited", true)
			else:
				point_node.set_meta("is_visited", true)
			update_simple_point_appearance(point_node, point_data)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
	if point_node and point_node.has_method("update_appearance"):
		point_node.update_appearance()
	
	# –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	var event_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	if point_node and point_node.has_method("get_event_type_name"):
		event_name = point_node.get_event_type_name()
	else:
		# –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ—á–µ–∫
		var event_names = ["–ü—É—Å—Ç–æ", "–ë–æ–π", "–õ–æ–≤—É—à–∫–∞", "–¢–æ—Ä–≥–æ–≤–µ—Ü", "–°–ª—É—á–∞–π–Ω–æ–µ"]
		event_name = event_names[point_data.event_type]
	
	log_message("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç–æ—á–∫–∞ " + str(point_index) + " - " + event_name)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
	if map_generator.is_at_segment_end():
		log_message("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–µ–≥–º–µ–Ω—Ç–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
		enable_branch_point_clicks()

func enable_branch_point_clicks():
	"""–í–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ —Ç–æ—á–∫–∞–º —Ä–∞–∑–≤–∏–ª–æ–∫"""
	var branch_points = map_generator.get_branch_points()
	
	for point_node in point_nodes:
		if is_instance_valid(point_node):
			var point_id = -1
			if point_node.has_method("get_point_id"):
				point_id = point_node.get("point_id")
			elif point_node.has_meta("point_id"):
				point_id = point_node.get_meta("point_id")
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ—á–∫–æ–π —Ä–∞–∑–≤–∏–ª–∫–∏
			for branch_point in branch_points:
				if branch_point.id == point_id:
					# –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏
					point_node.monitoring = true
					point_node.monitorable = true
					break

func on_party_movement_completed():
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç—Ä—è–¥–∞"""
	print("–î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç—Ä—è–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

func get_point_data_by_id(id: int):
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ ID"""
	for point_data in map_points:
		if point_data.id == id:
			return point_data
	return null

func get_point_node_by_id(id: int) -> Node:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª —Ç–æ—á–∫–∏ –ø–æ ID"""
	for point_node in point_nodes:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
		if point_node.has_method("get_point_id") and point_node.get("point_id") == id:
			return point_node
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–æ—á–∫–∏
		elif point_node.has_meta("point_id") and point_node.get_meta("point_id") == id:
			return point_node
	return null

func get_current_point_data():
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏"""
	return get_point_data_by_id(map_generator.current_point_id)

func get_next_point_data():
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏"""
	var current_point = get_current_point_data()
	if not current_point:
		return null
	
	var connections = map_generator.get_connections_for_point(current_point.id)
	for connection in connections:
		var connected_point = get_point_data_by_id(connection)
		if connected_point and not connected_point.is_visited:
			return connected_point
	
	return null

func _process(delta):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã"""
	if camera and party:
		var target_position = party.get_current_position() + camera_offset
		camera.position = target_position

func log_message(message: String):
	"""–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI"""
	if ui_log:
		ui_log.text += message + "\n"
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Label
		if ui_log.text.length() > 1000:
			ui_log.text = ui_log.text.right(-500)
	print(message) 
